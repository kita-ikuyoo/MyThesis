// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/PostLogin.proto

package PostLogin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostLogin service

func NewPostLoginEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostLogin service

type PostLoginService interface {
	PostLogin(ctx context.Context, in *PostLoginRequest, opts ...client.CallOption) (*PostLoginResponse, error)
}

type postLoginService struct {
	c    client.Client
	name string
}

func NewPostLoginService(name string, c client.Client) PostLoginService {
	return &postLoginService{
		c:    c,
		name: name,
	}
}

func (c *postLoginService) PostLogin(ctx context.Context, in *PostLoginRequest, opts ...client.CallOption) (*PostLoginResponse, error) {
	req := c.c.NewRequest(c.name, "PostLogin.PostLogin", in)
	out := new(PostLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostLogin service

type PostLoginHandler interface {
	PostLogin(context.Context, *PostLoginRequest, *PostLoginResponse) error
}

func RegisterPostLoginHandler(s server.Server, hdlr PostLoginHandler, opts ...server.HandlerOption) error {
	type postLogin interface {
		PostLogin(ctx context.Context, in *PostLoginRequest, out *PostLoginResponse) error
	}
	type PostLogin struct {
		postLogin
	}
	h := &postLoginHandler{hdlr}
	return s.Handle(s.NewHandler(&PostLogin{h}, opts...))
}

type postLoginHandler struct {
	PostLoginHandler
}

func (h *postLoginHandler) PostLogin(ctx context.Context, in *PostLoginRequest, out *PostLoginResponse) error {
	return h.PostLoginHandler.PostLogin(ctx, in, out)
}
