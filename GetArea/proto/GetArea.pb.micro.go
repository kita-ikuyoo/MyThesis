// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/GetArea.proto

package GetArea

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetArea service

func NewGetAreaEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetArea service

type GetAreaService interface {
	// 获取地区信息服务
	GetArea(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (GetArea_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GetArea_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (GetArea_BidiStreamService, error)
}

type getAreaService struct {
	c    client.Client
	name string
}

func NewGetAreaService(name string, c client.Client) GetAreaService {
	return &getAreaService{
		c:    c,
		name: name,
	}
}

func (c *getAreaService) GetArea(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "GetArea.GetArea", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getAreaService) ClientStream(ctx context.Context, opts ...client.CallOption) (GetArea_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "GetArea.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &getAreaServiceClientStream{stream}, nil
}

type GetArea_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type getAreaServiceClientStream struct {
	stream client.Stream
}

func (x *getAreaServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getAreaServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *getAreaService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GetArea_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "GetArea.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &getAreaServiceServerStream{stream}, nil
}

type GetArea_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type getAreaServiceServerStream struct {
	stream client.Stream
}

func (x *getAreaServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getAreaServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getAreaService) BidiStream(ctx context.Context, opts ...client.CallOption) (GetArea_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "GetArea.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &getAreaServiceBidiStream{stream}, nil
}

type GetArea_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type getAreaServiceBidiStream struct {
	stream client.Stream
}

func (x *getAreaServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getAreaServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *getAreaServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GetArea service

type GetAreaHandler interface {
	// 获取地区信息服务
	GetArea(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, GetArea_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, GetArea_ServerStreamStream) error
	BidiStream(context.Context, GetArea_BidiStreamStream) error
}

func RegisterGetAreaHandler(s server.Server, hdlr GetAreaHandler, opts ...server.HandlerOption) error {
	type getArea interface {
		GetArea(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type GetArea struct {
		getArea
	}
	h := &getAreaHandler{hdlr}
	return s.Handle(s.NewHandler(&GetArea{h}, opts...))
}

type getAreaHandler struct {
	GetAreaHandler
}

func (h *getAreaHandler) GetArea(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.GetAreaHandler.GetArea(ctx, in, out)
}

func (h *getAreaHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.GetAreaHandler.ClientStream(ctx, &getAreaClientStreamStream{stream})
}

type GetArea_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type getAreaClientStreamStream struct {
	stream server.Stream
}

func (x *getAreaClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *getAreaHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GetAreaHandler.ServerStream(ctx, m, &getAreaServerStreamStream{stream})
}

type GetArea_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type getAreaServerStreamStream struct {
	stream server.Stream
}

func (x *getAreaServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *getAreaHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.GetAreaHandler.BidiStream(ctx, &getAreaBidiStreamStream{stream})
}

type GetArea_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type getAreaBidiStreamStream struct {
	stream server.Stream
}

func (x *getAreaBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getAreaBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getAreaBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getAreaBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getAreaBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *getAreaBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
