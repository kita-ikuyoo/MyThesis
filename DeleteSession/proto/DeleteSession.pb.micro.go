// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/DeleteSession.proto

package DeleteSession

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeleteSession service

func NewDeleteSessionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DeleteSession service

type DeleteSessionService interface {
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...client.CallOption) (*DeleteSessionResponse, error)
}

type deleteSessionService struct {
	c    client.Client
	name string
}

func NewDeleteSessionService(name string, c client.Client) DeleteSessionService {
	return &deleteSessionService{
		c:    c,
		name: name,
	}
}

func (c *deleteSessionService) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...client.CallOption) (*DeleteSessionResponse, error) {
	req := c.c.NewRequest(c.name, "DeleteSession.DeleteSession", in)
	out := new(DeleteSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeleteSession service

type DeleteSessionHandler interface {
	DeleteSession(context.Context, *DeleteSessionRequest, *DeleteSessionResponse) error
}

func RegisterDeleteSessionHandler(s server.Server, hdlr DeleteSessionHandler, opts ...server.HandlerOption) error {
	type deleteSession interface {
		DeleteSession(ctx context.Context, in *DeleteSessionRequest, out *DeleteSessionResponse) error
	}
	type DeleteSession struct {
		deleteSession
	}
	h := &deleteSessionHandler{hdlr}
	return s.Handle(s.NewHandler(&DeleteSession{h}, opts...))
}

type deleteSessionHandler struct {
	DeleteSessionHandler
}

func (h *deleteSessionHandler) DeleteSession(ctx context.Context, in *DeleteSessionRequest, out *DeleteSessionResponse) error {
	return h.DeleteSessionHandler.DeleteSession(ctx, in, out)
}
