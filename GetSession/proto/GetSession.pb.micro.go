// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/GetSession.proto

package GetSession

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetSession service

func NewGetSessionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetSession service

type GetSessionService interface {
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...client.CallOption) (*GetSessionResponse, error)
}

type getSessionService struct {
	c    client.Client
	name string
}

func NewGetSessionService(name string, c client.Client) GetSessionService {
	return &getSessionService{
		c:    c,
		name: name,
	}
}

func (c *getSessionService) GetSession(ctx context.Context, in *GetSessionRequest, opts ...client.CallOption) (*GetSessionResponse, error) {
	req := c.c.NewRequest(c.name, "GetSession.GetSession", in)
	out := new(GetSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetSession service

type GetSessionHandler interface {
	GetSession(context.Context, *GetSessionRequest, *GetSessionResponse) error
}

func RegisterGetSessionHandler(s server.Server, hdlr GetSessionHandler, opts ...server.HandlerOption) error {
	type getSession interface {
		GetSession(ctx context.Context, in *GetSessionRequest, out *GetSessionResponse) error
	}
	type GetSession struct {
		getSession
	}
	h := &getSessionHandler{hdlr}
	return s.Handle(s.NewHandler(&GetSession{h}, opts...))
}

type getSessionHandler struct {
	GetSessionHandler
}

func (h *getSessionHandler) GetSession(ctx context.Context, in *GetSessionRequest, out *GetSessionResponse) error {
	return h.GetSessionHandler.GetSession(ctx, in, out)
}
