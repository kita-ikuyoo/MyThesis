// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/PostHouses.proto

package PostHouses

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostHouses service

func NewPostHousesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostHouses service

type PostHousesService interface {
	PostHouses(ctx context.Context, in *PostHousesRequest, opts ...client.CallOption) (*PostHousesResponse, error)
}

type postHousesService struct {
	c    client.Client
	name string
}

func NewPostHousesService(name string, c client.Client) PostHousesService {
	return &postHousesService{
		c:    c,
		name: name,
	}
}

func (c *postHousesService) PostHouses(ctx context.Context, in *PostHousesRequest, opts ...client.CallOption) (*PostHousesResponse, error) {
	req := c.c.NewRequest(c.name, "PostHouses.PostHouses", in)
	out := new(PostHousesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostHouses service

type PostHousesHandler interface {
	PostHouses(context.Context, *PostHousesRequest, *PostHousesResponse) error
}

func RegisterPostHousesHandler(s server.Server, hdlr PostHousesHandler, opts ...server.HandlerOption) error {
	type postHouses interface {
		PostHouses(ctx context.Context, in *PostHousesRequest, out *PostHousesResponse) error
	}
	type PostHouses struct {
		postHouses
	}
	h := &postHousesHandler{hdlr}
	return s.Handle(s.NewHandler(&PostHouses{h}, opts...))
}

type postHousesHandler struct {
	PostHousesHandler
}

func (h *postHousesHandler) PostHouses(ctx context.Context, in *PostHousesRequest, out *PostHousesResponse) error {
	return h.PostHousesHandler.PostHouses(ctx, in, out)
}
