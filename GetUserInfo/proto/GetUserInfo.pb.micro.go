// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/GetUserInfo.proto

package GetUserInfo

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetUserInfo service

func NewGetUserInfoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetUserInfo service

type GetUserInfoService interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error)
}

type getUserInfoService struct {
	c    client.Client
	name string
}

func NewGetUserInfoService(name string, c client.Client) GetUserInfoService {
	return &getUserInfoService{
		c:    c,
		name: name,
	}
}

func (c *getUserInfoService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "GetUserInfo.GetUserInfo", in)
	out := new(GetUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetUserInfo service

type GetUserInfoHandler interface {
	GetUserInfo(context.Context, *GetUserInfoRequest, *GetUserInfoResponse) error
}

func RegisterGetUserInfoHandler(s server.Server, hdlr GetUserInfoHandler, opts ...server.HandlerOption) error {
	type getUserInfo interface {
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserInfoResponse) error
	}
	type GetUserInfo struct {
		getUserInfo
	}
	h := &getUserInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&GetUserInfo{h}, opts...))
}

type getUserInfoHandler struct {
	GetUserInfoHandler
}

func (h *getUserInfoHandler) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserInfoResponse) error {
	return h.GetUserInfoHandler.GetUserInfo(ctx, in, out)
}
