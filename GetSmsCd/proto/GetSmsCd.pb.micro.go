// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/GetSmsCd.proto

package GetSmsCd

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetSmsCd service

func NewGetSmsCdEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetSmsCd service

type GetSmsCdService interface {
	GetSmsCd(ctx context.Context, in *SMSRequest, opts ...client.CallOption) (*SMSResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (GetSmsCd_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GetSmsCd_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (GetSmsCd_BidiStreamService, error)
}

type getSmsCdService struct {
	c    client.Client
	name string
}

func NewGetSmsCdService(name string, c client.Client) GetSmsCdService {
	return &getSmsCdService{
		c:    c,
		name: name,
	}
}

func (c *getSmsCdService) GetSmsCd(ctx context.Context, in *SMSRequest, opts ...client.CallOption) (*SMSResponse, error) {
	req := c.c.NewRequest(c.name, "GetSmsCd.GetSmsCd", in)
	out := new(SMSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getSmsCdService) ClientStream(ctx context.Context, opts ...client.CallOption) (GetSmsCd_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "GetSmsCd.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &getSmsCdServiceClientStream{stream}, nil
}

type GetSmsCd_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type getSmsCdServiceClientStream struct {
	stream client.Stream
}

func (x *getSmsCdServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getSmsCdServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *getSmsCdService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (GetSmsCd_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "GetSmsCd.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &getSmsCdServiceServerStream{stream}, nil
}

type GetSmsCd_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type getSmsCdServiceServerStream struct {
	stream client.Stream
}

func (x *getSmsCdServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getSmsCdServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSmsCdService) BidiStream(ctx context.Context, opts ...client.CallOption) (GetSmsCd_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "GetSmsCd.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &getSmsCdServiceBidiStream{stream}, nil
}

type GetSmsCd_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type getSmsCdServiceBidiStream struct {
	stream client.Stream
}

func (x *getSmsCdServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *getSmsCdServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *getSmsCdServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GetSmsCd service

type GetSmsCdHandler interface {
	GetSmsCd(context.Context, *SMSRequest, *SMSResponse) error
	ClientStream(context.Context, GetSmsCd_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, GetSmsCd_ServerStreamStream) error
	BidiStream(context.Context, GetSmsCd_BidiStreamStream) error
}

func RegisterGetSmsCdHandler(s server.Server, hdlr GetSmsCdHandler, opts ...server.HandlerOption) error {
	type getSmsCd interface {
		GetSmsCd(ctx context.Context, in *SMSRequest, out *SMSResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type GetSmsCd struct {
		getSmsCd
	}
	h := &getSmsCdHandler{hdlr}
	return s.Handle(s.NewHandler(&GetSmsCd{h}, opts...))
}

type getSmsCdHandler struct {
	GetSmsCdHandler
}

func (h *getSmsCdHandler) GetSmsCd(ctx context.Context, in *SMSRequest, out *SMSResponse) error {
	return h.GetSmsCdHandler.GetSmsCd(ctx, in, out)
}

func (h *getSmsCdHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.GetSmsCdHandler.ClientStream(ctx, &getSmsCdClientStreamStream{stream})
}

type GetSmsCd_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type getSmsCdClientStreamStream struct {
	stream server.Stream
}

func (x *getSmsCdClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *getSmsCdHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GetSmsCdHandler.ServerStream(ctx, m, &getSmsCdServerStreamStream{stream})
}

type GetSmsCd_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type getSmsCdServerStreamStream struct {
	stream server.Stream
}

func (x *getSmsCdServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *getSmsCdHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.GetSmsCdHandler.BidiStream(ctx, &getSmsCdBidiStreamStream{stream})
}

type GetSmsCd_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type getSmsCdBidiStreamStream struct {
	stream server.Stream
}

func (x *getSmsCdBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *getSmsCdBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *getSmsCdBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *getSmsCdBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *getSmsCdBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *getSmsCdBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
